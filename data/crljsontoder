#!/usr/bin/env node

var rs = require("jsrsasign");
var rsu = require("jsrsasign-util");
var fs = require("fs");
var path = require("path");

const _VERSION = "0.9.2e (2022-Apr-28)";
const _helpMsg = `
crljsontoder - generate DER CRL from jsrsasign CRL configuration json file

(example)
crljsontoder aaa.json aaa.crl
crljsontoder -h //this help
(see)
https://kjur.github.io/jsrsasign/api/symbols/KJUR.asn1.x509.CRL.html

`

if (process.argv.length < 2 || process.argv[2] == "-h") {
    console.log(_helpMsg);
    process.exit(0);
}

var inFile = process.argv[2];
var outFile = process.argv[3];
console.log(`converting ${inFile} to ${outFile} ...`);

var inDir = path.dirname(inFile);

var pCRL = rsu.readJSON(inFile);

if (pCRL.cakey != undefined &&
    _fileExists(inDir, pCRL.cakey)) {
    pCRL.cakey = _getContents(inDir, pCRL.cakey);
}
pCRL.ext = pCRL.ext.map(pExt => {
    if ((pExt.extname == "subjectKeyIdentifier" ||
	 pExt.extname == "authorityKeyIdentifier") &&
	_fileExists(inDir, pExt.kid)) {
	pExt.kid = _getContents(inDir, pExt.kid);
	return pExt;
    } else {
	return pExt;
    }
});

var hCRL = new rs.KJUR.asn1.x509.CRL(pCRL).tohex();
rsu.saveFileBinByHex(outFile, hCRL);

function _fileExists(dir, file) {
    var filePath = path.format({dir: dir, base: file});
    return fs.existsSync(filePath);
}

function _getContents(dir, file) {
    var filePath = path.format({dir: dir, base: file});
    return rsu.readFileUTF8(filePath);
}
